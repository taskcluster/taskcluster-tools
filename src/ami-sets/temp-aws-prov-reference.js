module.exports = { 'version': 0, '$schema': 'http://schemas.taskcluster.net/base/v1/api-reference.json#', 'title': 'AWS Provisioner API Documentation', 'description': "The AWS Provisioner is responsible for provisioning instances on EC2 for use in\nTaskCluster.  The provisioner maintains a set of worker configurations which\ncan be managed with an API that is typically available at\naws-provisioner.taskcluster.net/v1.  This API can also perform basic instance\nmanagement tasks in addition to maintaining the internal state of worker type\nconfiguration information.\n\nThe Provisioner runs at a configurable interval.  Each iteration of the\nprovisioner fetches a current copy the state that the AWS EC2 api reports.  In\neach iteration, we ask the Queue how many tasks are pending for that worker\ntype.  Based on the number of tasks pending and the scaling ratio, we may\nsubmit requests for new instances.  We use pricing information, capacity and\nutility factor information to decide which instance type in which region would\nbe the optimal configuration.\n\nEach EC2 instance type will declare a capacity and utility factor.  Capacity is\nthe number of tasks that a given machine is capable of running concurrently.\nUtility factor is a relative measure of performance between two instance types.\nWe multiply the utility factor by the spot price to compare instance types and\nregions when making the bidding choices.\n\nWhen a new EC2 instance is instantiated, its user data contains a token in\n`securityToken` that can be used with the `getSecret` method to retrieve\nthe worker's credentials and any needed passwords or other restricted\ninformation.  The worker is responsible for deleting the secret after\nretrieving it, to prevent dissemination of the secret to other proceses\nwhich can read the instance user data.\n", 'baseUrl': 'https://aws-provisioner.taskcluster.net/v1', 'entries': [{ 'type': 'function', 'method': 'get', 'route': '/list-worker-type-summaries', 'query': [], 'args': [], 'name': 'listWorkerTypeSummaries', 'stability': 'stable', 'title': 'List worker types with details', 'description': 'Return a list of worker types, including some summary information about\ncurrent capacity for each.  While this list includes all defined worker types,\nthere may be running EC2 instances for deleted worker types that are not\nincluded here.  The list is unordered.', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-summaries-response.json#' }, { 'type': 'function', 'method': 'put', 'route': '/worker-type/<workerType>', 'query': [], 'args': ['workerType'], 'name': 'createWorkerType', 'stability': 'stable', 'title': 'Create new Worker Type', 'description': "Create a worker type.  A worker type contains all the configuration\nneeded for the provisioner to manage the instances.  Each worker type\nknows which regions and which instance types are allowed for that\nworker type.  Remember that Capacity is the number of concurrent tasks\nthat can be run on a given EC2 resource and that Utility is the relative\nperformance rate between different instance types.  There is no way to\nconfigure different regions to have different sets of instance types\nso ensure that all instance types are available in all regions.\nThis function is idempotent.\n\nOnce a worker type is in the provisioner, a back ground process will\nbegin creating instances for it based on its capacity bounds and its\npending task count from the Queue.  It is the worker's responsibility\nto shut itself down.  The provisioner has a limit (currently 96hours)\nfor all instances to prevent zombie instances from running indefinitely.\n\nThe provisioner will ensure that all instances created are tagged with\naws resource tags containing the provisioner id and the worker type.\n\nIf provided, the secrets in the global, region and instance type sections\nare available using the secrets api.  If specified, the scopes provided\nwill be used to generate a set of temporary credentials available with\nthe other secrets.", 'scopes': [['aws-provisioner:manage-worker-type:<workerType>']], 'input': 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#' }, { 'type': 'function', 'method': 'post', 'route': '/worker-type/<workerType>/update', 'query': [], 'args': ['workerType'], 'name': 'updateWorkerType', 'stability': 'stable', 'title': 'Update Worker Type', 'description': 'Provide a new copy of a worker type to replace the existing one.\nThis will overwrite the existing worker type definition if there\nis already a worker type of that name.  This method will return a\n200 response along with a copy of the worker type definition created\nNote that if you are using the result of a GET on the worker-type\nend point that you will need to delete the lastModified and workerType\nkeys from the object returned, since those fields are not allowed\nthe request body for this method\n\nOtherwise, all input requirements and actions are the same as the\ncreate method.', 'scopes': [['aws-provisioner:manage-worker-type:<workerType>']], 'input': 'http://schemas.taskcluster.net/aws-provisioner/v1/create-worker-type-request.json#', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#' }, { 'type': 'function', 'method': 'get', 'route': '/worker-type/<workerType>', 'query': [], 'args': ['workerType'], 'name': 'workerType', 'stability': 'stable', 'title': 'Get Worker Type', 'description': 'Retreive a copy of the requested worker type definition.\nThis copy contains a lastModified field as well as the worker\ntype name.  As such, it will require manipulation to be able to\nuse the results of this method to submit date to the update\nmethod.', 'scopes': [['aws-provisioner:view-worker-type:<workerType>'], ['aws-provisioner:manage-worker-type:<workerType>']], 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#' }, { 'type': 'function', 'method': 'delete', 'route': '/worker-type/<workerType>', 'query': [], 'args': ['workerType'], 'name': 'removeWorkerType', 'stability': 'stable', 'title': 'Delete Worker Type', 'description': 'Delete a worker type definition.  This method will only delete\nthe worker type definition from the storage table.  The actual\ndeletion will be handled by a background worker.  As soon as this\nmethod is called for a worker type, the background worker will\nimmediately submit requests to cancel all spot requests for this\nworker type as well as killing all instances regardless of their\nstate.  If you want to gracefully remove a worker type, you must\neither ensure that no tasks are created with that worker type name\nor you could theoretically set maxCapacity to 0, though, this is\nnot a supported or tested action', 'scopes': [['aws-provisioner:manage-worker-type:<workerType>']] }, { 'type': 'function', 'method': 'get', 'route': '/list-worker-types', 'query': [], 'args': [], 'name': 'listWorkerTypes', 'stability': 'stable', 'title': 'List Worker Types', 'description': 'Return a list of string worker type names.  These are the names\nof all managed worker types known to the provisioner.  This does\nnot include worker types which are left overs from a deleted worker\ntype definition but are still running in AWS.', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/list-worker-types-response.json#' }, { 'type': 'function', 'method': 'put', 'route': '/ami-set/<id>', 'query': [], 'args': ['id'], 'name': 'createAmiSet', 'stability': 'stable', 'title': 'Create new AMI Set', 'description': 'Create an AMI Set. An AMI Set is a collection of AMIs with a single name.', 'scopes': [['aws-provisioner:manage-ami-set:<amiSetId>']], 'input': 'http://schemas.taskcluster.net/aws-provisioner/v1/create-ami-set-request.json#' }, { 'type': 'function', 'method': 'get', 'route': '/ami-set/<id>', 'query': [], 'args': ['id'], 'name': 'amiSet', 'stability': 'stable', 'title': 'Get AMI Set', 'description': 'Retreive a copy of the requested AMI set.', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-ami-set-response.json#' }, { 'type': 'function', 'method': 'post', 'route': '/ami-set/<id>/update', 'query': [], 'args': ['id'], 'name': 'updateAmiSet', 'stability': 'stable', 'title': 'Update AMI Set', 'description': 'Provide a new copy of an AMI Set to replace the existing one.\nThis will overwrite the existing AMI Set if there\nis already an AMI Set of that name. This method will return a\n200 response along with a copy of the AMI Set created.\nNote that if you are using the result of a GET on the ami-set\nend point that you will need to delete the lastModified and amiSet\nkeys from the object returned, since those fields are not allowed\nthe request body for this method.\n\nOtherwise, all input requirements and actions are the same as the\ncreate method.', 'scopes': [['aws-provisioner:manage-ami-set:<amiSetId>']], 'input': 'http://schemas.taskcluster.net/aws-provisioner/v1/create-ami-set-request.json#', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-ami-set-response.json#' }, { 'type': 'function', 'method': 'get', 'route': '/list-ami-sets', 'query': [], 'args': [], 'name': 'listAmiSets', 'stability': 'stable', 'title': 'List AMI sets', 'description': 'Return a list of AMI sets names.', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/list-ami-sets-response.json#' }, { 'type': 'function', 'method': 'delete', 'route': '/ami-set/<id>', 'query': [], 'args': ['id'], 'name': 'removeAmiSet', 'stability': 'stable', 'title': 'Delete AMI Set', 'description': 'Delete an AMI Set.', 'scopes': [['aws-provisioner:manage-ami-set:<amiSetId>']] }, { 'type': 'function', 'method': 'put', 'route': '/secret/<token>', 'query': [], 'args': ['token'], 'name': 'createSecret', 'stability': 'stable', 'title': 'Create new Secret', 'description': 'Insert a secret into the secret storage.  The supplied secrets will\nbe provided verbatime via `getSecret`, while the supplied scopes will\nbe converted into credentials by `getSecret`.\n\nThis method is not ordinarily used in production; instead, the provisioner\ncreates a new secret directly for each spot bid.', 'scopes': [['aws-provisioner:create-secret']], 'input': 'http://schemas.taskcluster.net/aws-provisioner/v1/create-secret-request.json#' }, { 'type': 'function', 'method': 'get', 'route': '/secret/<token>', 'query': [], 'args': ['token'], 'name': 'getSecret', 'stability': 'stable', 'title': 'Get a Secret', 'description': 'Retrieve a secret from storage.  The result contains any passwords or\nother restricted information verbatim as well as a temporary credential\nbased on the scopes specified when the secret was created.\n\nIt is important that this secret is deleted by the consumer (`removeSecret`),\nor else the secrets will be visible to any process which can access the\nuser data associated with the instance.', 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-secret-response.json#' }, { 'type': 'function', 'method': 'get', 'route': '/instance-started/<instanceId>/<token>', 'query': [], 'args': ['instanceId', 'token'], 'name': 'instanceStarted', 'stability': 'stable', 'title': 'Report an instance starting', 'description': 'An instance will report in by giving its instance id as well\nas its security token.  The token is given and checked to ensure\nthat it matches a real token that exists to ensure that random\nmachines do not check in.  We could generate a different token\nbut that seems like overkill' }, { 'type': 'function', 'method': 'delete', 'route': '/secret/<token>', 'query': [], 'args': ['token'], 'name': 'removeSecret', 'stability': 'stable', 'title': 'Remove a Secret', 'description': 'Remove a secret.  After this call, a call to `getSecret` with the given\ntoken will return no information.\n\nIt is very important that the consumer of a \nsecret delete the secret from storage before handing over control\nto untrusted processes to prevent credential and/or secret leakage.' }, { 'type': 'function', 'method': 'get', 'route': '/worker-type/<workerType>/launch-specifications', 'query': [], 'args': ['workerType'], 'name': 'getLaunchSpecs', 'stability': 'experimental', 'title': 'Get All Launch Specifications for WorkerType', 'description': 'This method returns a preview of all possible launch specifications\nthat this worker type definition could submit to EC2.  It is used to\ntest worker types, nothing more\n\n**This API end-point is experimental and may be subject to change without warning.**', 'scopes': [['aws-provisioner:view-worker-type:<workerType>'], ['aws-provisioner:manage-worker-type:<workerType>']], 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/get-launch-specs-response.json#' }, { 'type': 'function', 'method': 'get', 'route': '/state/<workerType>', 'query': [], 'args': ['workerType'], 'name': 'state', 'stability': 'stable', 'title': 'Get AWS State for a worker type', 'description': 'Return the state of a given workertype as stored by the provisioner. \nThis state is stored as three lists: 1 for all instances, 1 for requests\nwhich show in the ec2 api and 1 list for those only tracked internally\nin the provisioner.  The `summary` property contains an updated summary\nsimilar to that returned from `listWorkerTypeSummaries`.', 'scopes': [['aws-provisioner:view-worker-type:<workerType>']] }, { 'type': 'function', 'method': 'get', 'route': '/ping', 'query': [], 'args': [], 'name': 'ping', 'stability': 'experimental', 'title': 'Ping Server', 'description': 'Documented later...\n\n**Warning** this api end-point is **not stable**.' }, { 'type': 'function', 'method': 'get', 'route': '/backend-status', 'query': [], 'args': [], 'name': 'backendStatus', 'stability': 'experimental', 'title': 'Backend Status', 'description': "This endpoint is used to show when the last time the provisioner\nhas checked in.  A check in is done through the deadman's snitch\napi.  It is done at the conclusion of a provisioning iteration\nand used to tell if the background provisioning process is still\nrunning.\n\n**Warning** this api end-point is **not stable**.", 'output': 'http://schemas.taskcluster.net/aws-provisioner/v1/backend-status-response.json#' }] };
